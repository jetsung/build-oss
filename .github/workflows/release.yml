---
name: OSS Binary Builder

on  :
  workflow_dispatch:
    inputs:
      SOURCE:
        description: 项目源码地址（如 https://github.com/containers/skopeo）
        required: true
      LANGUAGE:
        description: 项目语言（可选，自动判断）
        required: false
      VERSION:
        description: 构建版本号（可选，默认最新）
        required: false
      BUILD_DIR:
        description: 构建目录（可选，默认项目根目录）
        required: false

jobs:
  checkout:
    runs-on: ubuntu-latest
    outputs:
      lang: ${{ steps.detect_lang.outputs.lang }}
    steps:
    - name: Detect language
      id: detect_lang
      run: |
        if [ -n "${{ github.event.inputs.LANGUAGE }}" ]; then
          echo "lang=${{ github.event.inputs.LANGUAGE }}" >> $GITHUB_OUTPUT
        else
          git clone "${{ github.event.inputs.SOURCE }}" repo
          cd repo
          if [ -f go.mod ]; then
            echo "lang=golang" >> $GITHUB_OUTPUT
          elif [ -f Cargo.toml ]; then
            echo "lang=rust" >> $GITHUB_OUTPUT
          elif [ -f package.json ]; then
            echo "lang=node" >> $GITHUB_OUTPUT
          elif [ -f pyproject.toml ]; then
            echo "lang=python" >> $GITHUB_OUTPUT
          else
            echo "lang=unknown" >> $GITHUB_OUTPUT
          fi
        fi

  build-go:
    runs-on: ubuntu-latest
    needs: checkout
    if: needs.checkout.outputs.lang == 'golang'
    steps:
    - name: Checkout
      uses: actions/checkout@v4
    - name: 环境变量写入 env
      run: |
        echo "SOURCE=${{ github.event.inputs.SOURCE }}" >> $GITHUB_ENV
        echo "VERSION=${{ github.event.inputs.VERSION }}" >> $GITHUB_ENV
        echo "BUILD_DIR=${{ github.event.inputs.BUILD_DIR }}" >> $GITHUB_ENV
        PROJECT_NAME=$(basename "${{ github.event.inputs.SOURCE }}" .git)
        echo "PROJECT_NAME=$PROJECT_NAME" >> $GITHUB_ENV
    - name: 拉取源码
      run: |
        git clone "${{ env.SOURCE }}" repo
        cd repo
        if [ -n "${{ env.VERSION }}" ]; then
          git checkout "${{ env.VERSION }}"
        fi    
    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ^1.24
        check-latest: true
    - name: Set up GoReleaser
      uses: goreleaser/goreleaser-action@v6
      with:
        install-only: true
    - name: Build with GoReleaser
      run: |
        cd repo
        cp ../.goreleaser.yaml .
        if [ -n "${{ env.VERSION }}" ]; then
          goreleaser release --clean --skip=validate,publish
        else
          goreleaser release --snapshot --clean --skip=validate,publish
        fi
    - name: Check files
      run: |
        ls -al repo/dist
    - name: Create Tag
      run: |
        if [ -n "${{ env.VERSION }}" ]; then
          TAG_NAME="${{ env.PROJECT_NAME }}-${{ env.VERSION }}"
        else
          TAG_NAME="${{ env.PROJECT_NAME }}-$(date +%Y%m%d)"
        fi
        git tag "$TAG_NAME"
        echo "TAG_NAME=$TAG_NAME" >> $GITHUB_ENV
       # 发布 Release
    - name: 发布 Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ env.TAG_NAME }}
        files: repo/dist/*.{tar.gz,zip}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
