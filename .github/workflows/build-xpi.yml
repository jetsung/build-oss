---
name: Build Firefox XPI Binary

on  :
  workflow_call:
    inputs:
      SOURCE:
        description: 项目源码地址
        required: true
        type: string
      VERSION:
        description: 构建版本号（可选，默认最新）
        required: false
        type: string
      BUILD_DIR:
        description: 构建目录（可选，默认项目根目录）
        required: false
        type: string
      EXTRA_ARGS:
        description: 扩展参数（可选，默认无）
        required: false
        type: string

jobs:
  build:
    runs-on: ubuntu-24.04
    env:
      HAS_AMO: ${{ secrets.AMO_JWT_ISSUER != '' && secrets.AMO_JWT_SECRET != '' }}
    steps:
    - name: Checkout
      uses: actions/checkout@v4
    - name: Setup NodeJS
      uses: actions/setup-node@v4
      with:
        node-version: 20
    - name: Set env
      run: |
        echo "SOURCE=${{ github.event.inputs.SOURCE }}" >> $GITHUB_ENV
        echo "VERSION=${{ github.event.inputs.VERSION }}" >> $GITHUB_ENV
        echo "BUILD_DIR=${{ github.event.inputs.BUILD_DIR }}" >> $GITHUB_ENV
        echo "EXTRA_ARGS=${{ github.event.inputs.EXTRA_ARGS }}" >> $GITHUB_ENV
        PROJECT_NAME=$(basename "${{ github.event.inputs.SOURCE }}" .git)
        echo "PROJECT_NAME=$PROJECT_NAME" >> $GITHUB_ENV
    - name: Checkout source code
      run: |
        git clone "${{ env.SOURCE }}" repo
        cd repo
        if [ -n "${{ env.VERSION }}" ]; then
          git checkout "${{ env.VERSION }}"
        fi   
    - name: Get project name
      run: |
        MANFEST_FILE=$(find ./repo -type f -name 'manifest.firefox.json' | head -n 1)
        if [ -z "$MANFEST_FILE" ]; then
          echo "manifest.firefox.json not found"
        else
          echo "rename manifest.firefox.json to manifest.json"
          echo "MANFEST_FILE: $MANFEST_FILE"
          mv "$MANFEST_FILE" "${MANFEST_FILE%.firefox.json}.json"
        fi

        MANFEST_FILE=$(find ./repo -type f -name 'manifest.json' | head -n 1)
        if [ -z "$MANFEST_FILE" ]; then
          echo "manifest.json not found"
          exit 1
        fi

        # PROJECT_NAME=$(node -p "require('$MANFEST_FILE').name")
        # if [ "$PROJECT_NAME" != "__MSG_appName__" ]; then
        #   echo "PROJECT_NAME=$PROJECT_NAME" >> $GITHUB_ENV
        # fi
        if [ -z "${{ env.BUILD_DIR }}" ]; then
          BUILD_DIR=$(dirname "$MANFEST_FILE")
          echo "BUILD_DIR=$BUILD_DIR" >> $GITHUB_ENV
        fi
    # - name: Generate key
    #   run: |
    #     if [ -n "${{ secrets.CRX_PRIVATE_KEY }}" ]; then
    #       echo "${ secrets.CRX_PRIVATE_KEY }" > private-key.pem
    #       echo "✅ 私钥已存在"
    #     else
    #       openssl genrsa -out private-key.pem 2048
    #       echo "✅ 私钥已生成"
    #     fi
    - name: Create Tag
      run: |
        if [ -n "${{ env.VERSION }}" ]; then
          TAG_NAME="${{ env.PROJECT_NAME }}-${{ env.VERSION }}"
        else
          TAG_NAME="${{ env.PROJECT_NAME }}-$(date +%Y%m%d)"
        fi
        git tag "$TAG_NAME"
        echo "TAG_NAME=$TAG_NAME" >> $GITHUB_ENV
    - name: Get short hash
      working-directory: ./repo
      run: |
        GIT_REV=$(git rev-parse --short HEAD)
        echo "GIT_REV=$GIT_REV" >> $GITHUB_ENV
        SOURCE_URL=${{ env.SOURCE }}
        echo "SOURCE_CODE_URL=${SOURCE_URL%.git}/tree/${GIT_REV}" >> $GITHUB_ENV
        echo "SOURCE_GIT_DATE=$(date +%Y-%m-%d)" >> $GITHUB_ENV
    - name: Copy Build Files
      working-directory: ${{ env.BUILD_DIR }}
      run: |
        mkdir /build

        # copy secret files
        find . -mindepth 2 \( -name "*.json" -o -name "*.js" -o -name "*.css" -o -name "*.html" \) \
          -not -path "*/node_modules/*" -not -path "*/tests/*" -not -path "*/.git/*" \
          -exec dirname {} \; | sed 's|^\./||' | cut -d'/' -f1 | sort -u \
          | xargs -I {} cp -r ./{} /build

        # copy files
        find . -maxdepth 1 \( -name "*.json" -o -name "*.js" -o -name "*.css" -o -name "*.html" \) -exec cp {} /build \;

    - name: Install web-ext
      run: npm install -g web-ext
    - name: Build XPI With no AMO
      if: ${{ !env.HAS_AMO }}
      run: |
        web-ext build \
          --source-dir /build \
          --artifacts-dir . \
          --overwrite-dest \
          --filename "${{ env.TAG_NAME }}.xpi" \
          ${{ env.EXTRA_ARGS }}
    - name: Build XPI With AMO
      if: ${{ env.HAS_AMO }}
      run: |
        web-ext sign \
          --api-key="${{ secrets.AMO_JWT_ISSUER }}" \
          --api-secret="${{ secrets.AMO_JWT_SECRET }}" \
          --source-dir /build \
          --artifacts-dir . \
          --channel=unlisted \
          ${{ env.EXTRA_ARGS }}
        mv *.xpi "${{ env.TAG_NAME }}.xpi"

    - name: Upload Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ env.TAG_NAME }}
        files: ${{ env.TAG_NAME }}.xpi
        body: |
          Date: ${{ env.SOURCE_GIT_DATE }}
          Source: [${{ env.SOURCE }}](${{ env.SOURCE_CODE_URL }})
          Publish by [Jetsung Chan](https://github.com/jetsung)
        append_body: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
